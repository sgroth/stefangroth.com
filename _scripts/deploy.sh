#!/bin/bash
set -e # Exit with nonzero exit code if anything fails
# set -x # Enable debug mode. It will print every executed line into log. Do not forget to clear any public logs after debug build that prints your sensitive data like passwords!
if [ ! "$TRAVIS" ]; then
	echo "This script should work only on Travis CI server"
	# Remove this code if you want to debug this script
	exit 0
fi
# Pull requests shouldn't try to deploy, just build to verify
if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    echo "Should not deploy pull request; just doing a build."
    build
    exit 0
fi
SETTINGS_URL="https://travis-ci.org/${TRAVIS_REPO_SLUG}/settings"
if [ ! "$GIT_USER" ]; then
	echo "Cannot push without git credentials: no user provided; set up GIT_USER environment variable in Travis CI project settings: ${SETTINGS_URL}"
	# There is no reason to continue deploy without push – the target action of this script
	exit 0
fi
if [ ! "$GIT_PASSWORD" ]; then
	echo "Cannot push without git credentials: no password provided; set up GIT_PASSWORD environment variable in Travis CI project settings: ${SETTINGS_URL}"
	# There is no reason to continue deploy without push – the target action of this script
	exit 0
fi
if [ ! "$GIT_HOST" ]; then
	echo "Cannot push without git credentials: no host provided; using GitHub.com as a default."
	echo "You can set up GIT_HOST environment variable in Travis CI project settings: ${SETTINGS_URL}"
	# You can skip defining this variable if your project are hosted on GitHub.com
	GIT_HOST="github.com"
fi
if [ ! "$SOURCE_BRANCH" ]; then
	echo "You are not provided a source git branch; using current Travis CI branch as a default."
	echo "You can set up SOURCE_BRANCH environment variable in Travis CI project settings: ${SETTINGS_URL}"
	# You can skip defining this variable if you want to deploy to the same branch
	SOURCE_BRANCH=$TRAVIS_BRANCH
fi
if [ ! "$TARGET_BRANCH" ]; then
	echo "You are not provided a target git branch; using current Travis CI branch as a default."
	echo "You can set up TARGET_BRANCH environment variable in Travis CI project settings: ${SETTINGS_URL}"
	# You can skip defining this variable if you want to deploy to the same branch
	# TODO: add specific behaviour if SOURCE_BRANCH != TARGET_BRANCH (gh-pages for example)
	TARGET_BRANCH=$TRAVIS_BRANCH
fi

sshpass -p "$PASSWORD" ssh "$USERNAME"@"$HOST" rm -rf html/stefangroth.de
sshpass -p "$PASSWORD" ssh "$USERNAME"@"$HOST" mkdir html/stefangroth.de
# sshpass -p "$PASSWORD" scp -v -o User="$USERNAME" -o Port=22 -r _site/* "$HOST":/var/www/web23683373/html/stefangroth.de


# If we want to deploy, we want to push. But Travis CI doing `git checkout -qf ${TRAVIS_COMMIT}` and there comes a detached HEAD. I don't want to figure out this shit, just let's checkout from detached HEAD into source branch.
git checkout ${SOURCE_BRANCH}
# Now let's build our project to know if there are will be any changes:
build
# Check if there are changes generated by build:
if [[ `git status --porcelain` ]]; then
	echo "There are changes to publish!"
	git status # debug
	# Add any changes to index
	git add .
	# Tell everyone that this changes is pushed by Travis CI:
	git config user.name "Travis CI"
	# Author email will contain server address where this build done and looks like [this](travis@testing-worker-linux-docker-c84a3a30-3437-linux-5.prod.travis-ci.org)
	# Add `[skip ci]` to commit message to not start Travis CI build from push of this deployment commit
	git commit -m "Travis CI $TRAVIS_COMMIT [skip ci]"
	# Build HTTPS git remote from Travis CI project environment variables
	git remote add deployment https://${GIT_USER}:${GIT_PASSWORD}@${GIT_HOST}/${TRAVIS_REPO_SLUG}.git
	# Push changes to target branch
	git push -u deployment ${TARGET_BRANCH}
# If no changes generated by build:
else
	echo "No changes to the output on this push; exiting."
    exit 0
fi
# I am scripting in Bash for the first time. Many thanks to [Domenic Denicola](https://github.com/domenic) for his [GitHub Pages publish script](https://gist.github.com/domenic/ec8b0fc8ab45f39403dd).


